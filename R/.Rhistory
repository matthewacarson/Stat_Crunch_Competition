iqr <- IQR(x)
if (bound = lower) {
if (bound == lower) {
q1 <- quantile(x, 0.25)
lower_limit <- q1 - 1.5 * iqr
return(lower_limit)
} else if (bound == upper) {
q3 <- quantile(x, 0.75)
upper_limit <- q3 + 1.5 * iqr
return(upper_limit)
}
outliers <- function(x, bound) {
iqr <- IQR(x)
if (bound == lower) {
q1 <- quantile(x, 0.25)
lower_limit <- q1 - 1.5 * iqr
return(lower_limit)
} else if (bound == upper) {
q3 <- quantile(x, 0.75)
upper_limit <- q3 + 1.5 * iqr
return(upper_limit)
}
}
outliers(Twitch23$`Watch time`, upper))
outliers(Twitch23$`Watch time`, upper)
outliers(Twitch23$`Watch time`, 'upper')
outliers <- function(x, bound) {
iqr <- IQR(x)
if (bound == 'lower') {
q1 <- quantile(x, 0.25)
lower_limit <- q1 - 1.5 * iqr
return(lower_limit)
} else if (bound == 'upper') {
q3 <- quantile(x, 0.75)
upper_limit <- q3 + 1.5 * iqr
return(upper_limit)
}
}
outliers(Twitch23$`Watch time`, 'upper')
outliers(Twitch23$`Watch time`, 'lower')
sumary(Twitch23$`Watch time`)
summary(Twitch23$`Watch time`)
IQR(Twitch23$`Watch time`)
Twitch23$`Watch time` + 1.5 * IQR(Twitch23$`Watch time`)
median(Twitch23$`Watch time`) + 1.5 * IQR(Twitch23$`Watch time`)
outliers(Twitch23$`Watch time`, 'lower')
outliers(Twitch23$`Watch time`, 'upper')
median(Twitch23$`Watch time`) + 1.5 * IQR(Twitch23$`Watch time`)
quantile(Twitch23$`Watch time`, 0.75) + 1.5 * IQR(Twitch23$`Watch time`)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch time` <= outliers(`Mean weekly watch time`, 'upper'),
`Mean weekly stream time` <= outliers(`Mean weekly stream time`, 'upper')
)
)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` <= outliers(`Mean weekly watch hours`, 'upper'),
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
?pairs
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` <= outliers(`Mean weekly watch hours`, 'upper'),
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
summary(Twitch23$`Mean weekly watch hours`)
hist(Twitch23$`Mean weekly watch hours`)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` < 200000,
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` < 150000,
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
outliers(Twitch23$`Mean weekly stream hours`, 'upper')
apply(Twitch23, 2, FUN = outliers(x, 'upper'))
apply(Twitch23, 2, FUN = function(x)outliers(x, 'upper'))
apply(Twitch23, 2, FUN = function(x) {outliers(x, 'upper')})
apply(Twitch23, 1, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23, MARGIN = 1, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23 |> select(-Language, -ID, -Channel, -Partnered, -Mature), MARGIN = 1, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23 |> select(-Language, -ID, -Channel, -Partnered, -Mature), MARGIN = 2, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23 |> select(-Language, -ID, -Channel, -Partnered, -Mature), MARGIN = 2, FUN = function(x) {outliers(x, 'lower')})
getwd()
Twitch23 <-
read_csv(
"../Twitch_Streamer_Data_2023.csv"
)
Twitch23 <-
read.csv(
"../Twitch_Streamer_Data_2023.csv"
)
?sample
Twitch23_sample <-
sample(Twitch23[Twitch23$Partnered,], size = 90)
Twitch23[Twitch23$Partnered,]
Twitch23_sample <-
sample(Twitch23[Twitch23$Partnered,], size = 90)
Twitch_partnered <- Twitch23[Twitch23$Partnered,]
View(Twitch_partnered)
Twitch23_sample <-
sample(Twitch_partnered, size = 90)
set.seed(123)
Twitch23_sample <-
sample(1:nrow(Twitch_partnered), size = 90)
Twitch23_sample <-
Twitch_partnered[sample(1:nrow(Twitch_partnered), size = 90),]
Twitch23_sample <-
rbind(
Twitch_partnered[sample(1:nrow(Twitch_partnered), size = 90),],
Twitch23[!Twitch23$Partnered,])
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ `Stream time`
)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
summary(twitch_sample_logit)
Twitch23_sample$predicted <- predict(twitch_sample_logit, type = 'response')
library(ggplot)
library(ggplot2)
?position_jitter
# Example: Visualization
ggplot(Twitch23_sample) +
geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = predicted), method = "glm", method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
# geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = predicted), method = "glm", method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
# geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = predicted),
method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
# geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = predicted),
method = "glm", se = 'false', method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
# geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = predicted),
method = "glm", se = F, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
# geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = predicted),
method = "glm", method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
# geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = Partnered),
method = "glm", method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
# geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = Partnered),
method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample) +
geom_point(aes(x = Mean.weekly.stream.hours, y = Partnered), position_jitter(height = 0.05)) +
geom_smooth(aes(x = Mean.weekly.stream.hours, y = Partnered),
method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.15)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(width = 0.1, height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
View(Twitch23_sample)
sample(1:nrow(Twitch_partnered), size = 90)
View(Twitch23_sample)
set.seed(123)
Twitch23_sample <-
rbind(
Twitch_partnered[sample(1:nrow(Twitch_partnered), size = 90),],
Twitch23[!Twitch23$Partnered,])
View(Twitch_partnered)
set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = 90)
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch23[!Twitch23$Partnered,])
View(Twitch_partnered)
Twitch_partnered <- Twitch23[Twitch23$Partnered,]
View(Twitch_partnered)
Twitch23$Partnered
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered),]
View(Twitch_partnered)
set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = 90)
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch23[!Twitch23$Partnered,])
View(Twitch23_sample)
table(Twitch23_sample$Partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
!Twitch23$Partnered
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Include),]
set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = 90)
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch23[!Twitch23$Partnered & as.logical(Include),])
View(Twitch23)
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Twitch23$Include),]
set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = 90)
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch23[!Twitch23$Partnered & as.logical(Twitch23$Include),])
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Twitch23$Include),]
set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = 27)
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch23[!Twitch23$Partnered & as.logical(Twitch23$Include),])
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
table(Twitch23_sample$Partnered)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = 11)
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch23[!Twitch23$Partnered & as.logical(Twitch23$Include),])
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
Include | !Include
Outliers <- Twitch23$Include | !Twitch23$Include
sum(Outliers)
Outliers <- Twitch23$Include | !Twitch23$Include
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Outliers),]
Twitch_not_partnered <- Twitch23[!Twitch23$Partnered & as.logical(Outliers),]
set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
Outliers <- Twitch23$Include ## | !Twitch23$Include
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Outliers),]
Twitch_not_partnered <- Twitch23[!Twitch23$Partnered & as.logical(Outliers),]
set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
summary(twitch_sample_logit)
Outliers <- Twitch23$Include | !Twitch23$Include
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Outliers),]
Twitch_not_partnered <- Twitch23[!Twitch23$Partnered & as.logical(Outliers),]
# set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
poisson_stream_viewers <- Twitch23 |>  glm(
family = 'poisson',
data = _,
`Average viewers` ~ `Stream time (hrs)`
)
# ################################## #
# Linear Regression ####
# ################################## #
formula <- `Average viewers` ~ `Stream time`
table(Twitch23_sample$Partnered)
Outliers <- Twitch23$Include
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Outliers),]
Twitch_not_partnered <- Twitch23[!Twitch23$Partnered & as.logical(Outliers),]
# set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
