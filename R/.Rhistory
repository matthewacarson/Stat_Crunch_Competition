library(readr)
library(dplyr)
Twitch_2023 <-
read_csv(
"C:/Users/madou/OneDrive - UCLA IT Services/Stat_Crunch_Competition/Twitch_Streamer_Data_2023.csv",
col_types = cols(Partnered...11 = col_skip(),
Mature...12 = col_skip())
)
Twitch_2023 <-
read_csv(
"C:/Users/madou/OneDrive - UCLA IT Services/Stat_Crunch_Competition/Twitch_Streamer_Data_2023.csv"
)
poisson <- Twitch_2023 |>  glm(
family = 'poisson',
data = _,
`Average viewers` ~ `Stream time (hrs)`
)
summary(poisson)
poisson_stream_viewers <- Twitch_2023 |>  glm(
family = 'poisson',
data = _,
`Average viewers` ~ `Stream time (hrs)`
)
rm(poisson)
summary(poisson_stream_viewers)
plot(poisson_stream_viewers)
# ################################## #
# Linear Regression ####
# ################################## #
lm_stream_avg_viewers <-
lm(formula = -1/`Average viewers` ~ `Stream time`,
data = Twitch_2023)
plot(lm_stream_avg_viewers)
# ################################## #
# Linear Regression ####
# ################################## #
lm_stream_avg_viewers <-
lm(formula = -1/`Average viewers` ~ `Stream time`,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 8000
]
)
# ################################## #
# Linear Regression ####
# ################################## #
lm_stream_avg_viewers <-
lm(formula = -1/`Average viewers` ~ `Stream time`,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 8000,
]
)
plot(lm_stream_avg_viewers)
plot(lm_stream_avg_viewers)
abline(v=0, col = 'red')
abline(h=0, col = 'red')
plot(lm_stream_avg_viewers)
abline(h=0, col = 'lightblue')
abline(h=0, col = 'blue')
plot(lm_stream_avg_viewers, which = 1)
plot(lm_stream_avg_viewers, which = 2)
# ################################## #
# Linear Regression ####
# ################################## #
lm_stream_avg_viewers <-
lm(formula = -1/`Average viewers` ~ `Stream time`,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7000,
]
)
plot(lm_stream_avg_viewers, which = 2)
plot(density(rstudent(lm_stream_avg_viewers)))
plot(density(rstandard(lm_stream_avg_viewers)))
hist(rstandard(lm_stream_avg_viewers))
# ################################## #
# Linear Regression ####
# ################################## #
lm_stream_avg_viewers <-
lm(formula = -1/`Average viewers` ~ `Stream time`,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 8000,
]
)
hist(rstandard(lm_stream_avg_viewers))
plot(density(rstandard(lm_stream_avg_viewers)))
# ################################## #
# Linear Regression ####
# ################################## #
lm_stream_avg_viewers <-
lm(formula = -1/`Average viewers` ~ `Stream time`,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
]
)
plot(density(rstandard(lm_stream_avg_viewers)))
hist(rstandard(lm_stream_avg_viewers))
plot(lm_stream_avg_viewers, which = 2)
# ################################## #
# Linear Regression ####
# ################################## #
formula <- -1/`Average viewers` ~ `Stream time`
lm_stream_avg_viewers <-
lm(formula,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
]
)
plot(formula)
plot(formula, data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
])
abline(lm_stream_avg_viewers, col = 'red')
plot(formula, data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
], pch = 19)
abline(lm_stream_avg_viewers, col = 'red')
plot(formula, data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
], pch = 19, cex = 0.5)
abline(lm_stream_avg_viewers, col = 'red')
abline(lm_stream_avg_viewers, col = 'red', lwd = 1.5)
abline(lm_stream_avg_viewers, col = 'red', lwd = 2)
plot(formula, data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
], pch = 19, cex = 0.5);abline(lm_stream_avg_viewers, col = 'red', lwd = 2)
# ################################## #
# Linear Regression ####
# ################################## #
formula <- `Average viewers` ~ `Stream time`
lm_stream_avg_viewers <-
lm(formula,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
]
)
plot(formula, data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
], pch = 19, cex = 0.5);abline(lm_stream_avg_viewers, col = 'red', lwd = 2)
plot(lm_stream_avg_viewers)
plot(curve(rstandard(lm_stream_avg_viewers)))
plot(curve(rstandard(lm_stream_avg_viewers)))
plot(density(rstandard(lm_stream_avg_viewers)))
hist(density(rstandard(lm_stream_avg_viewers)))
hist(rstandard(lm_stream_avg_viewers))
# ################################## #
# Linear Regression ####
# ################################## #
formula <- -1/`Average viewers` ~ `Stream time`
lm_stream_avg_viewers <-
lm(formula,
data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
]
)
plot(formula, data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
], pch = 19, cex = 0.5);abline(lm_stream_avg_viewers, col = 'red', lwd = 2)
# Extract studentized residuals from the model
student_resid <- rstandard(lm_stream_avg_viewers)
plot(density(rstandard(lm_stream_avg_viewers)))
hist(rstandard(lm_stream_avg_viewers))
preProcess(formula, method = c("BoxCox", "YeoJohnson"))
caret::preProcess(formula, method = c("BoxCox", "YeoJohnson"))
require(caret)
require('caret')
install.packages("caret")
caret::preProcess(formula, method = c("BoxCox", "YeoJohnson"))
caret::preProcess(formula, data = Twitch_2023, method = c("BoxCox", "YeoJohnson"))
caret::preProcess(x = Twitch_2023$`Average viewers` ~ Twitch_2023$`Stream time (hrs)`, method = c("BoxCox", "YeoJohnson"))
caret::preProcess(Twitch_2023[,c(`Average viewers`, `Stream time (hrs)`)] method = c("BoxCox", "YeoJohnson"))
caret::preProcess(Twitch_2023[,c(`Average viewers`, `Stream time (hrs)`)], method = c("BoxCox", "YeoJohnson"))
caret::preProcess(Twitch_2023[,c('Average viewers', 'Stream time (hrs)')], method = c("BoxCox", "YeoJohnson"))
str(Twitch_2023)
# ################################## #
# Linear Regression ####
# ################################## #
formula <- `Average viewers` ~ `Stream time`
caret::preProcess(Twitch_2023, method = c("BoxCox", "YeoJohnson"), formula = formula)
caret::preProcess(Twitch_2023, method = c("BoxCox", "YeoJohnson"))
caret::preProcess(Twitch_2023$`Average viewers`, method = c("BoxCox", "YeoJohnson"))
caret::preProcess(Twitch_2023['Average viewers'], method = c("BoxCox", "YeoJohnson"))
caret::preProcess(Twitch_2023[,'Average viewers'], method = c("BoxCox", "YeoJohnson"))
transformed_stream_time <- preProcess(Twitch_2023$`Stream time`, method = c("BoxCox", "YeoJohnson"))
library(caret)
transformed_stream_time <- preProcess(Twitch_2023$`Stream time`, method = c("BoxCox", "YeoJohnson"))
data <- Twitch_2023[c("Average viewers", "Stream time")]
# Use preProcess to explore transformations
transformations <- preProcess(data, method = c("BoxCox", "YeoJohnson"))
?preprocess
?preProcess
# Install and load required packages
install.packages("caret")
library(caret)
# Load your dataset
data(iris)
# Define your formula for linear regression
formula <- Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
# Create a preprocessing recipe that includes different transformations
preprocess <- preProcess(iris[, -5], method = c("center", "scale", "boxcox"))
data(iris)
# Define your formula for linear regression
formula <- Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
# Create a preprocessing recipe that includes different transformations
preprocess <- preProcess(iris[, -5], method = c("center", "scale", "boxcox"))
transformed_model <- car::powerTransform(model)
transformed_model <- car::powerTransform(lm_stream_avg_viewers)
# lm_stream_avg_viewers <-
lm(formula,
data = Twitch_2023 #[
# Twitch_2023$`Stream time (hrs)` <= 7500,
# ]
)
# ################################## #
# Linear Regression ####
# ################################## #
formula <- `Average viewers` ~ `Stream time`
# lm_stream_avg_viewers <-
lm(formula,
data = Twitch_2023 #[
# Twitch_2023$`Stream time (hrs)` <= 7500,
# ]
)
lm_stream_avg_viewers <-
lm(formula,
data = Twitch_2023 #[
# Twitch_2023$`Stream time (hrs)` <= 7500,
# ]
)
plot(formula, data = Twitch_2023[
Twitch_2023$`Stream time (hrs)` <= 7500,
], pch = 19, cex = 0.5);abline(lm_stream_avg_viewers, col = 'red', lwd = 2)
transformed_model <- car::powerTransform(lm_stream_avg_viewers)
transformed_model
transformed_model$message
transformed_model$value
summary(transformed_model)
plot(transformed_model)
library(readr)
library(dplyr)
Twitch_2023 <-
read_csv(
"C:/Users/madou/OneDrive - UCLA IT Services/Stat_Crunch_Competition/Twitch_Streamer_Data_2023.csv"
)
new_wd <- "C:/Users/madou/OneDrive - UCLA IT Services/Stat_Crunch_Competition"
setwd(new_wd)
Twitch_2023 <-
read_csv(
"/Twitch_Streamer_Data_2023.csv"
)
new_wd <- "C:/Users/madou/OneDrive - UCLA IT Services/Stat_Crunch_Competition/"
setwd(new_wd)
Twitch_2023 <-
read_csv(
"Twitch_Streamer_Data_2023.csv"
)
Twitch_2023_sample <-
read_csv("logit_sample/Sample_for_logit_Twitch_Streamer_Data_20.csv")
Twitch23 <-
read_csv(
"Twitch_Streamer_Data_2023.csv"
)
Twitch23_sample <-
read_csv("logit_sample/Sample_for_logit_Twitch_Streamer_Data_20.csv")
rm(Twitch_2023, Twitch_2023_sample)
Twitch23_sample_joined <-
left_join(
x = Twitch23_sample,
y = Twitch23[,c('Stream time', 'Watch time')]
)
Twitch23_sample_joined <-
left_join(
x = Twitch23_sample,
y = Twitch23
)
View(Twitch23_sample_joined)
Twitch23_sample_joined <-
left_join(
x = Twitch23_sample,
y = Twitch23[,c(Channel, `Peak viewers`, `Average viewers`, FollowersPrevYr,
Followers, `Followers gained`, FollowerGainPercent, Language, Partnered, Mature)]
)
View(Twitch23)
Twitch23_sample_joined <-
left_join(
x = Twitch23_sample |> rename(Channel_ID = ID),
y = Twitch23[c('Channel_ID', 'Stream time', 'Watch time')]
)
View(Twitch23_sample_joined)
View(Twitch23_sample)
write_csv(Twitch23_sample_joined, file = 'logit_sample/fixed_twitch_sample.csv')
Twitch23_sample <-
read_csv("logit_sample/10_70_Sampled_from_Sample_for_logit_Twit.csv")
rm(Twitch23_sample_joined)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'logit',
formula = Partnered ~ `Stream time`
)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ `Stream time`
)
Twitch23 <-
read_csv(
"Twitch_Streamer_Data_2023.csv"
)
library(readr)
library(dplyr)
Twitch23 <-
read_csv(
"Twitch_Streamer_Data_2023.csv"
)
Twitch23 <-
read_csv(
".../Twitch_Streamer_Data_2023.csv"
)
Twitch23 <-
read_csv(
"../Twitch_Streamer_Data_2023.csv"
)
View(Twitch23)
pairs(Twitch23)
str(Twitch23)
pairs(Twitch23 |> select(-ID, -Channel, - Language))
pairs(Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`
))
pairs(Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
))
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(`Followers gained percent` <= 400)
)
IQR(Twitch23$`Followers gained percent`)
Q1(Twitch23$`Stream time`)
outliers <- function(x, bound) {
iqr <- IQR(x)
if (bound = lower) {
if (bound == lower) {
q1 <- quantile(x, 0.25)
lower_limit <- q1 - 1.5 * iqr
return(lower_limit)
} else if (bound == upper) {
q3 <- quantile(x, 0.75)
upper_limit <- q3 + 1.5 * iqr
return(upper_limit)
}
outliers <- function(x, bound) {
iqr <- IQR(x)
if (bound == lower) {
q1 <- quantile(x, 0.25)
lower_limit <- q1 - 1.5 * iqr
return(lower_limit)
} else if (bound == upper) {
q3 <- quantile(x, 0.75)
upper_limit <- q3 + 1.5 * iqr
return(upper_limit)
}
}
outliers(Twitch23$`Watch time`, upper))
outliers(Twitch23$`Watch time`, upper)
outliers(Twitch23$`Watch time`, 'upper')
outliers <- function(x, bound) {
iqr <- IQR(x)
if (bound == 'lower') {
q1 <- quantile(x, 0.25)
lower_limit <- q1 - 1.5 * iqr
return(lower_limit)
} else if (bound == 'upper') {
q3 <- quantile(x, 0.75)
upper_limit <- q3 + 1.5 * iqr
return(upper_limit)
}
}
outliers(Twitch23$`Watch time`, 'upper')
outliers(Twitch23$`Watch time`, 'lower')
sumary(Twitch23$`Watch time`)
summary(Twitch23$`Watch time`)
IQR(Twitch23$`Watch time`)
Twitch23$`Watch time` + 1.5 * IQR(Twitch23$`Watch time`)
median(Twitch23$`Watch time`) + 1.5 * IQR(Twitch23$`Watch time`)
outliers(Twitch23$`Watch time`, 'lower')
outliers(Twitch23$`Watch time`, 'upper')
median(Twitch23$`Watch time`) + 1.5 * IQR(Twitch23$`Watch time`)
quantile(Twitch23$`Watch time`, 0.75) + 1.5 * IQR(Twitch23$`Watch time`)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch time` <= outliers(`Mean weekly watch time`, 'upper'),
`Mean weekly stream time` <= outliers(`Mean weekly stream time`, 'upper')
)
)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` <= outliers(`Mean weekly watch hours`, 'upper'),
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
?pairs
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` <= outliers(`Mean weekly watch hours`, 'upper'),
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
summary(Twitch23$`Mean weekly watch hours`)
hist(Twitch23$`Mean weekly watch hours`)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` < 200000,
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
pairs(
Twitch23 |> select(
-ID, -Channel, -Language, -`Watch time`, -`Stream time`,
-`Followers Prev Yr`, -Partnered, -Mature
) |>
filter(
`Peak viewers` <= outliers(`Peak viewers`, 'upper'),
`Average viewers` <= outliers(`Average viewers`, 'upper'),
Followers <= outliers(Followers, 'upper'),
`Followers gained` <= outliers(`Followers gained`, 'upper'),
`Followers gained percent` <= outliers(`Followers gained percent`, 'upper'),
`Mean weekly watch hours` < 150000,
`Mean weekly stream hours` <= outliers(`Mean weekly stream hours`, 'upper')
)
)
outliers(Twitch23$`Mean weekly stream hours`, 'upper')
apply(Twitch23, 2, FUN = outliers(x, 'upper'))
apply(Twitch23, 2, FUN = function(x)outliers(x, 'upper'))
apply(Twitch23, 2, FUN = function(x) {outliers(x, 'upper')})
apply(Twitch23, 1, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23, MARGIN = 1, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23 |> select(-Language, -ID, -Channel, -Partnered, -Mature), MARGIN = 1, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23 |> select(-Language, -ID, -Channel, -Partnered, -Mature), MARGIN = 2, FUN = function(x) {outliers(x, 'upper')})
apply(X = Twitch23 |> select(-Language, -ID, -Channel, -Partnered, -Mature), MARGIN = 2, FUN = function(x) {outliers(x, 'lower')})
