formula <- `Average viewers` ~ `Stream time`
table(Twitch23_sample$Partnered)
Outliers <- Twitch23$Include
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & as.logical(Outliers),]
Twitch_not_partnered <- Twitch23[!Twitch23$Partnered & as.logical(Outliers),]
# set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
# set.seed(123)
partnered_sample_rows <- sample(1:nrow(Twitch_partnered), size = nrow(Twitch_not_partnered))
Twitch23_sample <-
rbind(
Twitch_partnered[partnered_sample_rows,],
Twitch_not_partnered)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
# Example: Visualization
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
apply(c('readr', 'dplyr', 'ggplot2'), 1, FUN = library)
apply(c('readr', 'dplyr', 'ggplot2'), 2, FUN = library)
sapply(c('readr', 'dplyr', 'ggplot2'), 2, FUN = library)
sapply(c('readr', 'dplyr', 'ggplot2'), 1, FUN = library)
?sapply
sapply(c('readr', 'dplyr', 'ggplot2'), FUN = library)
sapply(c('readr', 'dplyr', 'ggplot2'), FUN = require)
sapply(c('readr', 'dplyr', 'ggplot2'), FUN = require, character.only = T)
Twitch23 <-
read.csv(
"Twitch_Streamer_Data_2023.csv"
)
getwd()
Twitch23 <-
read.csv(
"..\Twitch_Streamer_Data_2023.csv"
Twitch23 <-
read.csv(
"../Twitch_Streamer_Data_2023.csv"
)
Twitch23_sample <- Twitch23
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
ggplot(Twitch23_sample, aes(x = sqrt(Mean.weekly.stream.hours), y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours^(1/3), y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours^(1/6), y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
library(rcompanion)
install.packages("rcompanion")
library(rcompanion)
# Example data
data <- c(2, 3, 5, 6, 7, 10, 15, 20, 25, 30, 50)
# Apply Tukey's Ladder of Powers transformation
result <- transformTukey(data, plotit = TRUE)
hist(data)
# Print the result
print(result)
# Apply Tukey's Ladder of Powers transformation
result <- transformTukey(data, plotit = TRUE, returnLambda = T)
# Apply Tukey's Ladder of Powers transformation
result <- transformTukey(data, plotit = TRUE, returnLambda = TRUE)
# Print the result
print(result)
transformTukey(Twitch23, plotit = TRUE, returnLambda = TRUE)
transformTukey(Twitch23$Mean.weekly.stream.hours, plotit = TRUE, returnLambda = TRUE)
1/.5
1/.15
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours^(0.15), y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours^(0.15)
)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ (Mean.weekly.stream.hours^(0.15))
)
Twitch23$Mean.weekly.stream.hours.transformed <-  transformTukey(Twitch23$Mean.weekly.stream.hours, plotit = TRUE)
Twitch23$Mean.weekly.stream.hours.transformed
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours.transformed
)
Twitch23_sample <- Twitch23
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours.transformed
)
summary(twitch_sample_logit)
Twitch23$`Mean.weekly.stream.hours^0.15` <-  transformTukey(Twitch23$Mean.weekly.stream.hours, plotit = TRUE)
Twitch23_sample <- Twitch23
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ `Mean.weekly.stream.hours^0.15`
)
summary(twitch_sample_logit)
ggplot(Twitch23_sample, aes(x = `Mean.weekly.stream.hours^0.15`, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
plot(twitch_sample_logit)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.1, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.6, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.06, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
Outliers <-  Twitch23$Mean.weekly.stream.hours <= 150
Twitch_partnered <- Twitch23[as.logical(Twitch23$Partnered) & Outliers,]
Twitch_not_partnered <- Twitch23[!Twitch23$Partnered & Outliers,]
Twitch23_sample <-
rbind(
Twitch_partnered,
Twitch_not_partnered,
)
Twitch23_sample <-
rbind(
Twitch_partnered,
Twitch_not_partnered
)
ggplot(Twitch23_sample, aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
twitch_sample_logit <-
Twitch23_sample |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
summary(twitch_sample_logit)
ggplot(Twitch23 |> filter(Mean.weekly.stream.hours <= 150), aes(x = Mean.weekly.stream.hours, y = Partnered)) +
geom_point(position = position_jitter(height = 0.05, seed = 12)) +
geom_smooth(method = "glm", se = FALSE, method.args = list(family = "binomial")) +
geom_hline(yintercept = 0.5)
# labs(x = "Predictor Variable 1", y = "Predicted Probability") +
ggtitle("Logistic Regression Visualization")
twitch_sample_logit <-
Twitch23 |> filter(Mean.weekly.stream.hours <= 150) |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
summary(twitch_sample_logit)
twitch_sample_logit <-
Twitch23 |> filter(Mean.weekly.stream.hours <= 999) |>  glm(
family = 'binomial',
formula = Partnered ~ Mean.weekly.stream.hours
)
summary(twitch_sample_logit)
plotrix::barp(twitch_sample_logit)
plotrix::plotH(twitch_sample_logit)
plotrix::plotH(Twitch23$Mean.weekly.stream.hours, Twitch23$Average.viewers)
?autoplot
autoplot(twitch_sample_logit)
library(ggfortify)
autoplot(twitch_sample_logit)
convert_ipynb('C:\Users\madou\Downloads\Twitch_data.ipynb', output = xfun::with_ext(input, "Rmd"))
convert_ipynb('C:\\Users\\madou\\Downloads\\Twitch_data.ipynb', output = xfun::with_ext(input, "Rmd"))
rmarkdown::convert_ipynb('C:\\Users\\madou\\Downloads\\Twitch_data.ipynb', output = xfun::with_ext(input, "Rmd"))
rmarkdown::convert_ipynb('C:/Users/madou/Downloads/Twitch_data.ipynb', output = xfun::with_ext(input, "Rmd"))
rmarkdown::convert_ipynb('C:/Users/madou/Downloads/Twitch_data.ipynb', output = xfun::with_ext('C:/Users/madou/Downloads/Twitch_data.ipynb', "Rmd"))
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
cwd()
os.cwd()
import os
os.cwd()
import sys
sys.cwd()
sys.wd()
os.wd()
os.getcwd()
df = pd.read_csv("../Twitch_Streamer_Data_2023.csv")
os.getcwd()
```{python}
df = pd.read_csv("../Twitch_Streamer_Data_2023.csv")
df
df['Language'] == 'English']
eng = df[df['Language'] == 'English']
df['Language'] == 'English'
eng
df.columns
eng = df[df['Language'] == 'English', 'Mean weekly stream hours']
df.columns
eng = df[df['Language'] == 'English', ['Mean weekly stream hours', 'Average viewers']]
eng = df[df['Language'] == 'English']
eng = df.loc[df['Language'] == 'English', ['Mean weekly stream hours', 'Average viewers']]
eng
eng = df.loc[df['Language'] == 'English', ['Mean weekly stream hours', 'Average viewers', 'Partnered', 'Mature']]
eng
10**8.5/
10**8.5
sns.jointplot(data=df, x='Followers', y='Average viewers')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
eng = df[df['Language'] == 'English']
# eng = df.loc[df['Language'] == 'English', ['Mean weekly stream hours', 'Average viewers', 'Partnered', 'Mature']]
eng
sns.jointplot(data=df, x='Followers', y='Average viewers')
sns.jointplot(data=df, x='Followers', y='Average viewers')
plt.show()
sns.jointplot(data=df, x='Followers', y='Average viewers')
plt.show()
plt.show()
quit
model = smf.logit(formula='Partnered ~ Mean_weekly_stream_hours', data=df).fit()
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
df['Mean weekly stream hours'].head()
df['Mean weekly stream hours']
df.head()
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
quit
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
reticulate::repl_python()
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
# Print the summary of the model
# print(model.summary())
print(model.summary())
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
# Print the summary of the model
# print(model.summary())
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
# Print the summary of the model
# print(model.summary())
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
# print(model.summary())
df.head()
df['Mean weekly stream hours'].head()
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
# print(model.summary())
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
model = smf.logit(formula='Partnered ~ Mean_weekly_stream_hours', data=df).fit()
reticulate::repl_python()
import statsmodels.formula.api as smf
model = smf.logit(formula='Partnered ~ Mean_weekly_stream_hours', data=df).fit()
reticulate::repl_python()
fit = smf.ols("Average_viewers ~ Stream_time", data=df1).fit()
print(fit.summary())
import statsmodels.formula.api as smf
fit = smf.ols("Average_viewers ~ Stream_time", data=df1).fit()
print(fit.summary())
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv("../Twitch_Streamer_Data_2023.csv")
df
eng = df[df['Language'] == 'English']
# eng = df.loc[df['Language'] == 'English', ['Mean weekly stream hours', 'Average viewers', 'Partnered', 'Mature']]
eng
def inverse(x):
return 10**8.5/x
# xs = np.arange(eng['Stream time'].min(), eng['Stream time'].max())
# ys = inverse(xs)
sns.jointplot(data=df, x='Followers', y='Average viewers')
plt.show()
# plt.plot(xs, ys, color = 'orange')
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average viewers']])
df1 = pd.DataFrame(transformed)
df1 = df1.rename(columns={0: 'Followers', 1: 'Average_viewers'})
sns.jointplot(data=df1, x = 'Followers', y ='Average_viewers', kind="reg")
import statsmodels.formula.api as smf
fit = smf.ols("Average_viewers ~ Stream_time", data=df1).fit()
reticulate::repl_python()
import statsmodels.formula.api as smf
fit = smf.ols("Average_viewers ~ Stream_time", data=df1).fit()
reticulate::repl_python()
print(df1.dtypes)
df = pd.read_csv("../Twitch_Streamer_Data_2023.csv")
df
import statsmodels.formula.api as smf
# Check data types
print(df1.dtypes)
print(df.dtypes)
fit = smf.ols("Average_viewers ~ Stream_time", data=df).fit()
reticulate::repl_python()
import statsmodels.formula.api as smf
# Check data types
print(df.dtypes)
del df1
fit = smf.ols("Average_viewers ~ Stream_time", data=df).fit()
reticulate::py_last_error()
py_run_string("print(df1.columns)")
library(reticulate)
py_run_string("print(df1.columns)")
py_run_string("print(df.columns)")
py_run_string("df.describe")
py_run_string("print(df.describe)")
reticulate::repl_python()
fit = smf.ols("Average_viewers ~ Stream_time", data=df).fit()
reticulate::repl_python()
df = pd.DataFrame(df)
print(df.dtypes)
model = smf.logit(formula='Partnered ~ Mean_weekly_stream_hours', data=df).fit()
reticulate::repl_python()
df = pd.DataFrame(df)
print(df.dtypes)
model = smf.logit(formula='Partnered ~ Mean weekly stream hours', data=df).fit()
model = smf.logit(formula='Partnered ~ "Mean weekly stream hours"', data=df).fit()
logit_df = df.rename(columns={'Mean weekly stream hours' = 'Mean_weekly_stream_hours '})
logit_df = df.rename(columns={'Mean weekly stream hours': 'Mean_weekly_stream_hours '})
print(df.dtypes)
df = pd.DataFrame(df)
logit_df = df.rename(columns={'Mean weekly stream hours': 'Mean_weekly_stream_hours '})
print(df.dtypes)
logit_df = df.rename(columns={'Mean weekly stream hours': 'Mean_weekly_stream_hours'})
df = pd.DataFrame(df)
logit_df = df.rename(columns={'Mean weekly stream hours': 'Mean_weekly_stream_hours'})
print(df.dtypes)
df.iloc['Mean weekly stream hours']
df[''Mean weekly stream hours'']
df['Mean weekly stream hours']
logit_df = df.rename(columns={'Mean weekly stream hours': 'Mean_weekly_stream_hours'}, inplace = True)
print(df.dtypes)
print(logit_df.dtypes)
logit_df = df.rename(columns={'Mean weekly stream hours': 'Mean_weekly_stream_hours'})
print(logit_df.dtypes)
model = smf.logit(formula='Partnered ~ "Mean weekly stream hours"', data=logit_df).fit()
model = smf.logit(formula='Partnered ~ Mean_weekly_stream_hours', data=logit_df).fit()
print(model.summary())
fit = smf.ols("Average_viewers ~ Stream_time", data=df).fit()
reticulate::repl_python()
fit = smf.ols("Average_viewers ~ Stream_time", data=df1).fit()
print(fit.summary())
fit = smf.ols("Average_viewers ~ Stream_time", data=df1).fit()
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average viewers']])
df1 = pd.DataFrame(transformed)
df1 = df1.rename(columns={0: 'Followers', 1: 'Average_viewers'})
sns.jointplot(data=df1, x = 'Followers', y ='Average_viewers', kind="reg")
plt.show()
fit = smf.ols("Average_viewers ~ Stream_time", data=df1).fit()
reticulate::repl_python()
fit = smf.ols("Average_viewers ~ Mean_weekly_stream_time", data=df1).fit()
df1.dtypes()
reticulate::repl_python()
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average viewers']])
df1 = pd.DataFrame(transformed)
df1.dtypes()
df1.dtypes
df1.dtypes()
df1.dtypes()
df1 = pd.DataFrame(transformed)
df1.dtypes()
df1.rename(columns={0: 'Followers', 1: 'Average_viewers'})
df1.rename(columns={0: 'Followers', 1: 'Average_viewers'}, inline = True)
fit = smf.ols("Average_viewers ~ Mean weekly stream time", data=df1).fit()
df1.rename(columns={0: 'Followers', 1: 'Average_viewers', 'Mean weekly stream time' = 'Mean_weekly_stream_time'}, inline = True)
df1.rename(columns={0: 'Followers', 1: 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inline = True)
df1.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inline = True)
df1.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average viewers']])
df1 = pd.DataFrame(transformed)
df1.dtypes()
df1.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
`
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average viewers']])
df1 = pd.DataFrame(transformed)
df1.dtypes()
df1.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
sns.jointplot(data=df1, x = 'Followers', y ='Average_viewers', kind="reg")
plt.show()
View(df)
df.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average viewers']])
df1 = pd.DataFrame(transformed)
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average viewers']])
transformed = pt.fit_transform(df[['Followers', 'Average_viewers']])
df1 = pd.DataFrame(transformed)
sns.jointplot(data=df1, x = 'Followers', y ='Average_viewers', kind="reg")
transformed = pt.fit_transform(df[['Followers', 'Average_viewers']])
df1 = pd.DataFrame(transformed)
df = pd.read_csv("../Twitch_Streamer_Data_2023.csv")
df
sns.jointplot(data=df, x='Followers', y='Average viewers')
plt.show()
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average_viewers']])
df1 = pd.DataFrame(transformed)
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average_viewers']])
df.dtypes()
df.dtypes()
df = pd.read_csv("../Twitch_Streamer_Data_2023.csv")
df = pd.DataFrame(df)
sns.jointplot(data=df, x='Followers', y='Average viewers')
plt.show()
# plt.plot(xs, ys, color = 'orange')
df.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average_viewers']])
df1 = pd.DataFrame(transformed)
sns.jointplot(data=df1, x = 'Followers', y ='Average_viewers', kind="reg")
plt.show()
df.rename(columns={1: 'Followers', 2: 'Average_viewers'}, inplace = True)
df1.rename(columns={1: 'Followers', 2: 'Average_viewers'}, inplace = True)
df.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv("../Twitch_Streamer_Data_2023.csv")
df = pd.DataFrame(df)
sns.jointplot(data=df, x='Followers', y='Average viewers')
plt.show()
# plt.plot(xs, ys, color = 'orange')
df.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer()
transformed = pt.fit_transform(df[['Followers', 'Average_viewers']])
df1 = pd.DataFrame(transformed)
df1.rename(columns={1: 'Followers', 2: 'Average_viewers'}, inplace = True)
sns.jointplot(data=df1, x = 'Followers', y ='Average_viewers', kind="reg")
plt.show()
View(df1)
df1 = pd.DataFrame(transformed)
df1.rename(columns={0: 'Followers', 1: 'Average_viewers'}, inplace = True)
sns.jointplot(data=df1, x = 'Followers', y ='Average_viewers', kind="reg")
plt.show()
fit = smf.ols("Average_viewers ~ Mean_weekly_stream_time", data=df1).fit()
reticulate::repl_python()
fit = smf.ols("Average_viewers ~ Mean_weekly_stream_time", data=df).fit()
reticulate::repl_python()
df.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream time': 'Mean_weekly_stream_time'}, inplace = True)
View(df)
df.rename(columns={'Average viewers': 'Average_viewers', 'Mean weekly stream hours': 'Mean_weekly_stream_hours'}, inplace = True)
fit = smf.ols("Average_viewers ~ Mean_weekly_stream_hours", data=df).fit()
print(fit.summary())
print(df.dtypes)
model = smf.logit(formula='Partnered ~ Mean_weekly_stream_hours', data=logit_df).fit()
print(model.summary())
model = smf.logit(formula='Partnered ~ Mean_weekly_stream_hours', data=df).fit()
print(model.summary())
